# This Python file uses the following encoding: utf-8
# test_import_ct_rdsr_ge_pixelmed.py

import os
from decimal import Decimal
from django.test import TestCase
from remapp.extractors import rdsr
from remapp.models import GeneralStudyModuleAttr, PatientIDSettings


class ImportCTRDSR(TestCase):
    def test_import_ct_rdsr_ge_pixelmed(self):
        """
        Imports a known RDSR generated by PixelMed from a GE LS16 RT study, and tests all the values
        imported against those expected.
        """
        PatientIDSettings.objects.create()

        dicom_file = "test_files/CT-RDSR-GEPixelMed.dcm"
        root_tests = os.path.dirname(os.path.abspath(__file__))
        dicom_path = os.path.join(root_tests, dicom_file)

        rdsr(dicom_path)
        study = GeneralStudyModuleAttr.objects.all()[0]

        # Test that study level data is recorded correctly
        self.assertEqual(study.generalequipmentmoduleattr_set.get().institution_name, u'OpenREM centre m√©dical')
        self.assertEqual(study.generalequipmentmoduleattr_set.get().manufacturer, u'GE MEDICAL SYSTEMS')

        # Test that patient study level data is recorded correctly
        self.assertEqual(study.patientstudymoduleattr_set.get().patient_age, '100Y')
        self.assertAlmostEqual(study.patientstudymoduleattr_set.get().patient_age_decimal, Decimal(100.0))

        # Test that summary level exposure data is recorded correctly
        self.assertEqual(study.ctradiationdose_set.get().ctaccumulateddosedata_set.get().
                         total_number_of_irradiation_events, 2)
        self.assertAlmostEqual(study.ctradiationdose_set.get().ctaccumulateddosedata_set.get().
                         ct_dose_length_product_total, Decimal(586.34))

        # Test that event level exposure data is recorded correctly
        self.assertAlmostEqual(study.ctradiationdose_set.get().ctirradiationeventdata_set.
                               order_by('id')[0].mean_ctdivol, Decimal(60.41))
